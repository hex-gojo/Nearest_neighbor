// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _nearest_neighbor_axim_HH_
#define _nearest_neighbor_axim_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct nearest_neighbor_axim : public sc_module {
    // Port declarations 14
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<12> > cam_fb_address0;
    sc_out< sc_logic > cam_fb_ce0;
    sc_in< sc_lv<32> > cam_fb_q0;
    sc_out< sc_lv<14> > nn_fb_address0;
    sc_out< sc_logic > nn_fb_ce0;
    sc_out< sc_logic > nn_fb_we0;
    sc_out< sc_lv<32> > nn_fb_d0;
    sc_out< sc_lv<32> > ap_return;


    // Module declarations
    nearest_neighbor_axim(sc_module_name name);
    SC_HAS_PROCESS(nearest_neighbor_axim);

    ~nearest_neighbor_axim();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<8> > y_1_fu_89_p2;
    sc_signal< sc_lv<8> > y_1_reg_167;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<6> > p_lshr_f_cast_reg_172;
    sc_signal< sc_lv<1> > exitcond1_fu_83_p2;
    sc_signal< sc_lv<14> > tmp_2_fu_109_p3;
    sc_signal< sc_lv<14> > tmp_2_reg_177;
    sc_signal< sc_lv<8> > x_1_fu_127_p2;
    sc_signal< sc_lv<8> > x_1_reg_185;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<1> > exitcond_fu_121_p2;
    sc_signal< sc_lv<14> > tmp_7_fu_155_p2;
    sc_signal< sc_lv<14> > tmp_7_reg_195;
    sc_signal< sc_lv<8> > y_reg_61;
    sc_signal< sc_lv<8> > x_reg_72;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<64> > tmp_6_fu_150_p1;
    sc_signal< sc_lv<64> > tmp_8_fu_160_p1;
    sc_signal< sc_lv<7> > tmp_fu_105_p1;
    sc_signal< sc_lv<6> > p_lshr_f1_cast_fu_133_p4;
    sc_signal< sc_lv<12> > tmp_5_fu_143_p3;
    sc_signal< sc_lv<14> > x_cast3_fu_117_p1;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_state3;
    static const sc_lv<4> ap_ST_fsm_state4;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<8> ap_const_lv8_80;
    static const sc_lv<8> ap_const_lv8_1;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<7> ap_const_lv7_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_cam_fb_address0();
    void thread_cam_fb_ce0();
    void thread_exitcond1_fu_83_p2();
    void thread_exitcond_fu_121_p2();
    void thread_nn_fb_address0();
    void thread_nn_fb_ce0();
    void thread_nn_fb_d0();
    void thread_nn_fb_we0();
    void thread_p_lshr_f1_cast_fu_133_p4();
    void thread_tmp_2_fu_109_p3();
    void thread_tmp_5_fu_143_p3();
    void thread_tmp_6_fu_150_p1();
    void thread_tmp_7_fu_155_p2();
    void thread_tmp_8_fu_160_p1();
    void thread_tmp_fu_105_p1();
    void thread_x_1_fu_127_p2();
    void thread_x_cast3_fu_117_p1();
    void thread_y_1_fu_89_p2();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
