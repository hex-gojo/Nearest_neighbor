// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "nearest_neighbor_axim.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic nearest_neighbor_axim::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic nearest_neighbor_axim::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> nearest_neighbor_axim::ap_ST_fsm_state1 = "1";
const sc_lv<4> nearest_neighbor_axim::ap_ST_fsm_state2 = "10";
const sc_lv<4> nearest_neighbor_axim::ap_ST_fsm_state3 = "100";
const sc_lv<4> nearest_neighbor_axim::ap_ST_fsm_state4 = "1000";
const sc_lv<32> nearest_neighbor_axim::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> nearest_neighbor_axim::ap_const_lv32_1 = "1";
const sc_lv<1> nearest_neighbor_axim::ap_const_lv1_0 = "0";
const sc_lv<32> nearest_neighbor_axim::ap_const_lv32_2 = "10";
const sc_lv<8> nearest_neighbor_axim::ap_const_lv8_0 = "00000000";
const sc_lv<1> nearest_neighbor_axim::ap_const_lv1_1 = "1";
const sc_lv<32> nearest_neighbor_axim::ap_const_lv32_3 = "11";
const sc_lv<8> nearest_neighbor_axim::ap_const_lv8_80 = "10000000";
const sc_lv<8> nearest_neighbor_axim::ap_const_lv8_1 = "1";
const sc_lv<32> nearest_neighbor_axim::ap_const_lv32_6 = "110";
const sc_lv<7> nearest_neighbor_axim::ap_const_lv7_0 = "0000000";
const bool nearest_neighbor_axim::ap_const_boolean_1 = true;

nearest_neighbor_axim::nearest_neighbor_axim(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_83_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_83_p2 );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_83_p2 );

    SC_METHOD(thread_cam_fb_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_6_fu_150_p1 );

    SC_METHOD(thread_cam_fb_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_exitcond1_fu_83_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( y_reg_61 );

    SC_METHOD(thread_exitcond_fu_121_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( x_reg_72 );

    SC_METHOD(thread_nn_fb_address0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_8_fu_160_p1 );

    SC_METHOD(thread_nn_fb_ce0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_nn_fb_d0);
    sensitive << ( cam_fb_q0 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_nn_fb_we0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_p_lshr_f1_cast_fu_133_p4);
    sensitive << ( x_reg_72 );

    SC_METHOD(thread_tmp_2_fu_109_p3);
    sensitive << ( tmp_fu_105_p1 );

    SC_METHOD(thread_tmp_5_fu_143_p3);
    sensitive << ( p_lshr_f_cast_reg_172 );
    sensitive << ( p_lshr_f1_cast_fu_133_p4 );

    SC_METHOD(thread_tmp_6_fu_150_p1);
    sensitive << ( tmp_5_fu_143_p3 );

    SC_METHOD(thread_tmp_7_fu_155_p2);
    sensitive << ( tmp_2_reg_177 );
    sensitive << ( x_cast3_fu_117_p1 );

    SC_METHOD(thread_tmp_8_fu_160_p1);
    sensitive << ( tmp_7_reg_195 );

    SC_METHOD(thread_tmp_fu_105_p1);
    sensitive << ( y_reg_61 );

    SC_METHOD(thread_x_1_fu_127_p2);
    sensitive << ( x_reg_72 );

    SC_METHOD(thread_x_cast3_fu_117_p1);
    sensitive << ( x_reg_72 );

    SC_METHOD(thread_y_1_fu_89_p2);
    sensitive << ( y_reg_61 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_83_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond_fu_121_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "0001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "nearest_neighbor_axim_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, cam_fb_address0, "(port)cam_fb_address0");
    sc_trace(mVcdFile, cam_fb_ce0, "(port)cam_fb_ce0");
    sc_trace(mVcdFile, cam_fb_q0, "(port)cam_fb_q0");
    sc_trace(mVcdFile, nn_fb_address0, "(port)nn_fb_address0");
    sc_trace(mVcdFile, nn_fb_ce0, "(port)nn_fb_ce0");
    sc_trace(mVcdFile, nn_fb_we0, "(port)nn_fb_we0");
    sc_trace(mVcdFile, nn_fb_d0, "(port)nn_fb_d0");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, y_1_fu_89_p2, "y_1_fu_89_p2");
    sc_trace(mVcdFile, y_1_reg_167, "y_1_reg_167");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, p_lshr_f_cast_reg_172, "p_lshr_f_cast_reg_172");
    sc_trace(mVcdFile, exitcond1_fu_83_p2, "exitcond1_fu_83_p2");
    sc_trace(mVcdFile, tmp_2_fu_109_p3, "tmp_2_fu_109_p3");
    sc_trace(mVcdFile, tmp_2_reg_177, "tmp_2_reg_177");
    sc_trace(mVcdFile, x_1_fu_127_p2, "x_1_fu_127_p2");
    sc_trace(mVcdFile, x_1_reg_185, "x_1_reg_185");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, exitcond_fu_121_p2, "exitcond_fu_121_p2");
    sc_trace(mVcdFile, tmp_7_fu_155_p2, "tmp_7_fu_155_p2");
    sc_trace(mVcdFile, tmp_7_reg_195, "tmp_7_reg_195");
    sc_trace(mVcdFile, y_reg_61, "y_reg_61");
    sc_trace(mVcdFile, x_reg_72, "x_reg_72");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, tmp_6_fu_150_p1, "tmp_6_fu_150_p1");
    sc_trace(mVcdFile, tmp_8_fu_160_p1, "tmp_8_fu_160_p1");
    sc_trace(mVcdFile, tmp_fu_105_p1, "tmp_fu_105_p1");
    sc_trace(mVcdFile, p_lshr_f1_cast_fu_133_p4, "p_lshr_f1_cast_fu_133_p4");
    sc_trace(mVcdFile, tmp_5_fu_143_p3, "tmp_5_fu_143_p3");
    sc_trace(mVcdFile, x_cast3_fu_117_p1, "x_cast3_fu_117_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("nearest_neighbor_axim.hdltvin.dat");
    mHdltvoutHandle.open("nearest_neighbor_axim.hdltvout.dat");
}

nearest_neighbor_axim::~nearest_neighbor_axim() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void nearest_neighbor_axim::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond1_fu_83_p2.read(), ap_const_lv1_0))) {
        x_reg_72 = ap_const_lv8_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        x_reg_72 = x_1_reg_185.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_121_p2.read(), ap_const_lv1_1))) {
        y_reg_61 = y_1_reg_167.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        y_reg_61 = ap_const_lv8_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond1_fu_83_p2.read(), ap_const_lv1_0))) {
        p_lshr_f_cast_reg_172 = y_reg_61.read().range(6, 1);
        tmp_2_reg_177 = tmp_2_fu_109_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_121_p2.read()))) {
        tmp_7_reg_195 = tmp_7_fu_155_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        x_1_reg_185 = x_1_fu_127_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        y_1_reg_167 = y_1_fu_89_p2.read();
    }
}

void nearest_neighbor_axim::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void nearest_neighbor_axim::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void nearest_neighbor_axim::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void nearest_neighbor_axim::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void nearest_neighbor_axim::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond1_fu_83_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void nearest_neighbor_axim::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void nearest_neighbor_axim::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond1_fu_83_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void nearest_neighbor_axim::thread_ap_return() {
    ap_return = ap_const_lv32_0;
}

void nearest_neighbor_axim::thread_cam_fb_address0() {
    cam_fb_address0 =  (sc_lv<12>) (tmp_6_fu_150_p1.read());
}

void nearest_neighbor_axim::thread_cam_fb_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        cam_fb_ce0 = ap_const_logic_1;
    } else {
        cam_fb_ce0 = ap_const_logic_0;
    }
}

void nearest_neighbor_axim::thread_exitcond1_fu_83_p2() {
    exitcond1_fu_83_p2 = (!y_reg_61.read().is_01() || !ap_const_lv8_80.is_01())? sc_lv<1>(): sc_lv<1>(y_reg_61.read() == ap_const_lv8_80);
}

void nearest_neighbor_axim::thread_exitcond_fu_121_p2() {
    exitcond_fu_121_p2 = (!x_reg_72.read().is_01() || !ap_const_lv8_80.is_01())? sc_lv<1>(): sc_lv<1>(x_reg_72.read() == ap_const_lv8_80);
}

void nearest_neighbor_axim::thread_nn_fb_address0() {
    nn_fb_address0 =  (sc_lv<14>) (tmp_8_fu_160_p1.read());
}

void nearest_neighbor_axim::thread_nn_fb_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        nn_fb_ce0 = ap_const_logic_1;
    } else {
        nn_fb_ce0 = ap_const_logic_0;
    }
}

void nearest_neighbor_axim::thread_nn_fb_d0() {
    nn_fb_d0 = cam_fb_q0.read();
}

void nearest_neighbor_axim::thread_nn_fb_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        nn_fb_we0 = ap_const_logic_1;
    } else {
        nn_fb_we0 = ap_const_logic_0;
    }
}

void nearest_neighbor_axim::thread_p_lshr_f1_cast_fu_133_p4() {
    p_lshr_f1_cast_fu_133_p4 = x_reg_72.read().range(6, 1);
}

void nearest_neighbor_axim::thread_tmp_2_fu_109_p3() {
    tmp_2_fu_109_p3 = esl_concat<7,7>(tmp_fu_105_p1.read(), ap_const_lv7_0);
}

void nearest_neighbor_axim::thread_tmp_5_fu_143_p3() {
    tmp_5_fu_143_p3 = esl_concat<6,6>(p_lshr_f_cast_reg_172.read(), p_lshr_f1_cast_fu_133_p4.read());
}

void nearest_neighbor_axim::thread_tmp_6_fu_150_p1() {
    tmp_6_fu_150_p1 = esl_zext<64,12>(tmp_5_fu_143_p3.read());
}

void nearest_neighbor_axim::thread_tmp_7_fu_155_p2() {
    tmp_7_fu_155_p2 = (!tmp_2_reg_177.read().is_01() || !x_cast3_fu_117_p1.read().is_01())? sc_lv<14>(): (sc_biguint<14>(tmp_2_reg_177.read()) + sc_biguint<14>(x_cast3_fu_117_p1.read()));
}

void nearest_neighbor_axim::thread_tmp_8_fu_160_p1() {
    tmp_8_fu_160_p1 = esl_zext<64,14>(tmp_7_reg_195.read());
}

void nearest_neighbor_axim::thread_tmp_fu_105_p1() {
    tmp_fu_105_p1 = y_reg_61.read().range(7-1, 0);
}

void nearest_neighbor_axim::thread_x_1_fu_127_p2() {
    x_1_fu_127_p2 = (!x_reg_72.read().is_01() || !ap_const_lv8_1.is_01())? sc_lv<8>(): (sc_biguint<8>(x_reg_72.read()) + sc_biguint<8>(ap_const_lv8_1));
}

void nearest_neighbor_axim::thread_x_cast3_fu_117_p1() {
    x_cast3_fu_117_p1 = esl_zext<14,8>(x_reg_72.read());
}

void nearest_neighbor_axim::thread_y_1_fu_89_p2() {
    y_1_fu_89_p2 = (!y_reg_61.read().is_01() || !ap_const_lv8_1.is_01())? sc_lv<8>(): (sc_biguint<8>(y_reg_61.read()) + sc_biguint<8>(ap_const_lv8_1));
}

void nearest_neighbor_axim::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond1_fu_83_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(exitcond_fu_121_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        default : 
            ap_NS_fsm = "XXXX";
            break;
    }
}

void nearest_neighbor_axim::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"cam_fb_address0\" :  \"" << cam_fb_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"cam_fb_ce0\" :  \"" << cam_fb_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"cam_fb_q0\" :  \"" << cam_fb_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"nn_fb_address0\" :  \"" << nn_fb_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"nn_fb_ce0\" :  \"" << nn_fb_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"nn_fb_we0\" :  \"" << nn_fb_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"nn_fb_d0\" :  \"" << nn_fb_d0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_return\" :  \"" << ap_return.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

